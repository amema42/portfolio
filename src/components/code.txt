import { DragControls } from "framer-motion";

interface Props {
  dragControls: DragControls;
}

export function DragIcon({ dragControls }: Props) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 39 39"
      width="24"
      height="24"
      onPointerDown={(event) => dragControls.start(event)}
      className="cursor-grab text-gray-400"
    >
      {[...Array(3)].map((_, row) =>
        [...Array(3)].map((_, col) => (
          <circle
            key={`${row}-${col}`}
            cx={5 + col * 14}
            cy={5 + row * 14}
            r="4"
            fill="#AAA"
          />
        ))
      )}
    </svg>
  );
}
"use client";

import { useState } from "react";
import { ChevronDown, ChevronUp } from "lucide-react";
import { motion } from "framer-motion";

interface FAQItemProps {
  question: string;
  answer: string;
  defaultOpen?: boolean;
}

const FAQItem: React.FC<FAQItemProps> = ({ question, answer, defaultOpen = false }) => {
  const [isOpen, setIsOpen] = useState(defaultOpen);

  return (
    <div className="border-b border-gray-700">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="w-full flex justify-between items-center py-4 px-6 text-left text-white hover:bg-gray-800 rounded-2xl"
      >
        <span className="text-lg font-semibold">{question}</span>
        {isOpen ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
      </button>
      <motion.div
        initial={{ height: 0, opacity: 0 }}
        animate={{ height: isOpen ? "auto" : 0, opacity: isOpen ? 1 : 0 }}
        transition={{ duration: 0.3, ease: "easeInOut" }}
        className="overflow-hidden"
      >
        <div className="px-6 pb-4 text-gray-300">{answer}</div>
      </motion.div>
    </div>
  );
};

export default function FAQ() {
  const faqs: FAQItemProps[] = [
    {
      question: "Who am I?",
      answer: "I am a passionate developer focused on modern web technologies.",
      defaultOpen: true,
    },
    {
      question: "What do I do?",
      answer: "I build scalable and maintainable web applications.",
    },
    {
      question: "What tech do I use?",
      answer: "I specialize in React, Next.js, Tailwind, and backend technologies.",
    },
  ];

  return (
    <div className="w-full">
      <div className="w-full bg-gray-800 text-white rounded-3xl shadow-lg overflow-hidden p-6">
        {faqs.map((faq, index) => (
          <FAQItem key={index} {...faq} />
        ))}
      </div>
    </div>
  );
}
import { useEffect } from "react";
import { useMotionValue, useTransform } from "framer-motion";

export function useRaisedShadow(value: any) {
  const shadow = useMotionValue("0px 0px 0px rgba(0,0,0,0)");

  useEffect(() => {
    return value.onChange((latest: any) => {
      const blur = Math.max(5, 20 - latest);
      shadow.set(`0px ${latest}px ${blur}px rgba(0,0,0,0.15)`);
    });
  }, [value, shadow]);

  return shadow;
}
"use client";

import { ReactNode } from "react";

interface SectionProps {
  title: string;
  children: ReactNode | ReactNode[];
  bgColor: string;
}

export default function SectionWrapper({ title, children, bgColor }: SectionProps) {
  const childrenArray = Array.isArray(children) ? children : [children];

  return (
    <section className={`min-h-screen ${bgColor} w-full px-20 py-20`}>
      <div className="flex flex-row justify-between items-start h-full gap-20">
        <div className="w-1/2">
          <h2 className="text-9xl font-bold text-white">{title}</h2>
          {Array.isArray(children) && children[0]}
        </div>
        <div className="w-1/2 flex flex-col items-start pt-10">
          {Array.isArray(children) ? children[1] : children}
        </div>
      </div>
    </section>
  );
}

"use client";

import { useMotionValue, Reorder, useDragControls } from "framer-motion";
import { useRaisedShadow } from "./RaisedShadow";
import { DragIcon } from "./DragIcon";

interface SkillProps {
  skill: { id: string; name: string; emoji: string };
}

export function SkillItem({ skill }: SkillProps) {
  const y = useMotionValue(0);
  const boxShadow = useRaisedShadow(y);
  const dragControls = useDragControls();

  return (
    <Reorder.Item
      value={skill}
      id={skill.id}
      style={{ boxShadow, y }}
      dragListener={false}
      dragControls={dragControls}
      className="flex justify-between items-center bg-white text-pink-600 px-5 py-3 shadow-md cursor-pointer"
    >
      <span className="text-3xl">{skill.emoji} <strong>{skill.name}</strong></span>
      <DragIcon dragControls={dragControls} />
    </Reorder.Item>
  );
}
// components/Skills.tsx
"use client";

import { useState, useCallback } from 'react';
import SkillsToggle from './SkillsToggle';
import SkillsList from './SkillsList';

export default function Skills() {
  const [filters, setFilters] = useState({
    frontend: true,
    backend: false,
    tools: false,
  });

  const handleToggle = useCallback((newFilters: typeof filters) => {
    setFilters(newFilters);
  }, []);

  return (
    <>
      <SkillsToggle onToggle={handleToggle} initialFilters={filters} />
      <SkillsList activeFilters={filters} />
    </>
  );
}// filepath: /Users/animema/Desktop/portfolio/src/components/SkillsList.tsx
"use client";

import { useState, useCallback } from "react";
import { Reorder } from "framer-motion";
import { SkillItem } from "./SkillItem";
import SkillsToggle from "./SkillsToggle";

const allSkills = {
  frontend: [
    { id: "1", name: "React", emoji: "⚛️" },
    { id: "2", name: "Next.js", emoji: "🚀" },
    { id: "3", name: "TailwindCSS", emoji: "🎨" },
  ],
  backend: [
    { id: "4", name: "Node.js", emoji: "🟢" },
    { id: "5", name: "Express", emoji: "⚡" },
    { id: "6", name: "NestJS", emoji: "🛠" },
  ],
  tools: [
    { id: "7", name: "Docker", emoji: "🐳" },
    { id: "8", name: "Linux", emoji: "🐧" },
    { id: "9", name: "Git", emoji: "🌱" },
  ],
};

export default function SkillsList() {
  const [selectedSkills, setSelectedSkills] = useState(allSkills.frontend);

  const handleToggle = useCallback((filters: { frontend: boolean; backend: boolean; tools: boolean }) => {
    const newSkills = [
      ...(filters.frontend ? allSkills.frontend : []),
      ...(filters.backend ? allSkills.backend : []),
      ...(filters.tools ? allSkills.tools : []),
    ];
    setSelectedSkills(newSkills);
  }, []);

  const handleReorder = (newOrder: typeof selectedSkills) => {
    setSelectedSkills(newOrder);
  };

  return (
    <div>
      <SkillsToggle onToggle={handleToggle} />
      <Reorder.Group axis="y" values={selectedSkills} onReorder={handleReorder} className="space-y-3 w-full">
        {selectedSkills.map((skill) => (
          <SkillItem key={skill.id} skill={skill} />
        ))}
      </Reorder.Group>
    </div>
  );
}"use client";

import { useState, useEffect } from "react";
import { motion, MotionConfig } from "framer-motion";

interface ToggleProps {
  label: string;
  isActive: boolean;
  onClick: () => void;
}

function ToggleSwitch({ label, isActive, onClick }: ToggleProps) {
  return (
    <MotionConfig transition={{ duration: 0.3, ease: "easeOut" }}>
      <motion.div
        className="flex items-center justify-between w-60 bg-gray-800 text-white px-4 py-3 rounded-xl cursor-pointer shadow-md"
        onClick={onClick}
      >
        <span className="text-lg">{label}</span>
        <motion.div
          className="w-12 h-7 bg-gray-600 rounded-full flex items-center p-1"
          animate={{ backgroundColor: isActive ? "#22c55e" : "#555" }}
        >
          <motion.div
            layout
            className="w-5 h-5 bg-white rounded-full"
            animate={{ x: isActive ? 20 : 0 }}
          />
        </motion.div>
      </motion.div>
    </MotionConfig>
  );
}

export default function SkillsToggle({ onToggle }: { onToggle: (filters: { frontend: boolean; backend: boolean; tools: boolean; }) => void }) {
  const [activeFilters, setActiveFilters] = useState({
    frontend: true,
    backend: false,
    tools: false,
  });

  useEffect(() => {
    onToggle(activeFilters);
  }, [activeFilters, onToggle]);

  const toggleCategory = (category: keyof typeof activeFilters) => {
    setActiveFilters((prev) => ({
      ...prev,
      [category]: !prev[category],
    }));
  };

  return (
    <div className="space-y-3 w-[280px]">
      <ToggleSwitch label="Front-end" isActive={activeFilters.frontend} onClick={() => toggleCategory("frontend")} />
      <ToggleSwitch label="Back-end" isActive={activeFilters.backend} onClick={() => toggleCategory("backend")} />
      <ToggleSwitch label="Tools" isActive={activeFilters.tools} onClick={() => toggleCategory("tools")} />
    </div>
  );
}
